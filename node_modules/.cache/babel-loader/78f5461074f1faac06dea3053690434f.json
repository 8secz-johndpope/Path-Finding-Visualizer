{"ast":null,"code":"import disjointSet from \"disjoint-set\";\n\nconst kruskal = (grid, rows, columns) => {\n  const set = disjointSet();\n  let addedWalls = [];\n  let removedWalls = [];\n  let edges = [];\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < columns; j++) {\n      if (i % 2 === 0 || j % 2 === 0) {\n        if (i !== 0 && j !== 0 && i !== rows - 1 && j !== columns - 1) {\n          edges.push(grid[i][j]);\n        }\n      } else set.add(grid[i][j]);\n\n      grid[i][j].isWall = true;\n      addedWalls.push(grid[i][j]);\n    }\n  }\n\n  shuffle(edges);\n  edges.forEach(edge => {\n    if (edge.row % 2 !== 0 && !set.connected(grid[edge.row][edge.col - 1], grid[edge.row][edge.col + 1])) {\n      set.union(grid[edge.row][edge.col - 1], grid[edge.row][edge.col + 1]);\n      grid[edge.row][edge.col].isWall = false;\n      grid[edge.row][edge.col - 1].isWall = false;\n      grid[edge.row][edge.col + 1].isWall = false;\n      removedWalls.push(grid[edge.row][edge.col - 1]);\n      removedWalls.push(grid[edge.row][edge.col]);\n      removedWalls.push(grid[edge.row][edge.col + 1]);\n    }\n\n    if (edge.col % 2 !== 0 && !set.connected(grid[edge.row - 1][edge.col], grid[edge.row + 1][edge.col])) {\n      set.union(grid[edge.row - 1][edge.col], grid[edge.row + 1][edge.col]);\n      grid[edge.row][edge.col].isWall = false;\n      grid[edge.row - 1][edge.col].isWall = false;\n      grid[edge.row + 1][edge.col].isWall = false;\n      removedWalls.push(grid[edge.row - 1][edge.col]);\n      removedWalls.push(grid[edge.row][edge.col]);\n      removedWalls.push(grid[edge.row + 1][edge.col]);\n    }\n  });\n  return {\n    addedWalls,\n    removedWalls,\n    animAddedWalls: false\n  };\n};\n\nconst shuffle = array => {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n};\n\nexport default kruskal;","map":{"version":3,"sources":["/home/aakash/Desktop/PathfindingVis-master/src/mazeGen/kruskall.js"],"names":["disjointSet","kruskal","grid","rows","columns","set","addedWalls","removedWalls","edges","i","j","push","add","isWall","shuffle","forEach","edge","row","connected","col","union","animAddedWalls","array","length","Math","floor","random"],"mappings":"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","sourcesContent":["import disjointSet from \"disjoint-set\";\n\nconst kruskal = (grid, rows, columns) => {\n  const set = disjointSet();\n  let addedWalls = [];\n  let removedWalls = [];\n  let edges = [];\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < columns; j++) {\n      if (i % 2 === 0 || j % 2 === 0) {\n        if (i !== 0 && j !== 0 && i !== rows - 1 && j !== columns - 1) {\n          edges.push(grid[i][j]);\n        }\n      } else set.add(grid[i][j]);\n      grid[i][j].isWall = true;\n      addedWalls.push(grid[i][j]);\n    }\n  }\n  shuffle(edges);\n  edges.forEach(edge => {\n    if (\n      edge.row % 2 !== 0 &&\n      !set.connected(grid[edge.row][edge.col - 1], grid[edge.row][edge.col + 1])\n    ) {\n      set.union(grid[edge.row][edge.col - 1], grid[edge.row][edge.col + 1]);\n      grid[edge.row][edge.col].isWall = false;\n      grid[edge.row][edge.col - 1].isWall = false;\n      grid[edge.row][edge.col + 1].isWall = false;\n      removedWalls.push(grid[edge.row][edge.col - 1]);\n      removedWalls.push(grid[edge.row][edge.col]);\n      removedWalls.push(grid[edge.row][edge.col + 1]);\n    }\n    if (\n      edge.col % 2 !== 0 &&\n      !set.connected(grid[edge.row - 1][edge.col], grid[edge.row + 1][edge.col])\n    ) {\n      set.union(grid[edge.row - 1][edge.col], grid[edge.row + 1][edge.col]);\n      grid[edge.row][edge.col].isWall = false;\n      grid[edge.row - 1][edge.col].isWall = false;\n      grid[edge.row + 1][edge.col].isWall = false;\n      removedWalls.push(grid[edge.row - 1][edge.col]);\n      removedWalls.push(grid[edge.row][edge.col]);\n      removedWalls.push(grid[edge.row + 1][edge.col]);\n    }\n  });\n  return { addedWalls, removedWalls, animAddedWalls: false };\n};\n\nconst shuffle = array => {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n};\n\nexport default kruskal;\n"]},"metadata":{},"sourceType":"module"}