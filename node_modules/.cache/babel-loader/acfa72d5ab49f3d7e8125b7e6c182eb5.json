{"ast":null,"code":"import { combineReducers } from \"redux\";\n\nconst algoReducer = (algo = 1, action) => {\n  if (action.type === \"SELECT_ALGO\") return action.payload;\n  return algo;\n};\n\nconst diagReducer = (allowDiag = false, action) => {\n  if (action.type === \"ALLOW_DIAG\") return action.payload;\n  return allowDiag;\n};\n\nconst heuristicReducer = (heuristic = {\n  1: \"manhatten\"\n}, action) => {\n  if (action.type === \"CHANGE_HEURISTIC\") return { ...heuristic,\n    ...action.payload\n  };\n  return heuristic;\n};\n\nconst mazeReducer = (maze = 0, action) => {\n  if (action.type === \"SELECT_MAZE\") return action.payload;\n  return maze;\n};\n\nconst animMazeReducer = (animMaze = true, action) => {\n  if (action.type === \"ANIMATE_MAZE\") return action.payload;\n  return animMaze;\n};\n\nconst animatingReducer = (anim = false, action) => {\n  if (action.type === \"SET_ANIMATING\") return action.payload;\n  return anim;\n};\n\nconst visitedReducer = (visited = 0, action) => {\n  switch (action.type) {\n    case \"SET_VISITED\":\n      return action.payload;\n\n    default:\n      return visited;\n  }\n};\n\nconst shortestReducer = (shortest = 0, action) => {\n  switch (action.type) {\n    case \"SET_SHORTEST\":\n      return action.payload;\n\n    default:\n      return shortest;\n  }\n};\n\nexport default combineReducers({\n  algo: algoReducer,\n  diag: diagReducer,\n  heuristic: heuristicReducer,\n  maze: mazeReducer,\n  animMaze: animMazeReducer,\n  anim: animatingReducer,\n  visited: visitedReducer,\n  shortest: shortestReducer\n});","map":{"version":3,"sources":["/home/aakash/Desktop/PathfindingVis-master/src/reducers/index.js"],"names":["combineReducers","algoReducer","algo","action","type","payload","diagReducer","allowDiag","heuristicReducer","heuristic","mazeReducer","maze","animMazeReducer","animMaze","animatingReducer","anim","visitedReducer","visited","shortestReducer","shortest","diag"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;;AAEA,MAAMC,WAAW,GAAG,CAACC,IAAI,GAAG,CAAR,EAAWC,MAAX,KAAsB;AACxC,MAAIA,MAAM,CAACC,IAAP,KAAgB,aAApB,EAAmC,OAAOD,MAAM,CAACE,OAAd;AACnC,SAAOH,IAAP;AACD,CAHD;;AAKA,MAAMI,WAAW,GAAG,CAACC,SAAS,GAAG,KAAb,EAAoBJ,MAApB,KAA+B;AACjD,MAAIA,MAAM,CAACC,IAAP,KAAgB,YAApB,EAAkC,OAAOD,MAAM,CAACE,OAAd;AAClC,SAAOE,SAAP;AACD,CAHD;;AAKA,MAAMC,gBAAgB,GAAG,CAACC,SAAS,GAAG;AAAE,KAAG;AAAL,CAAb,EAAiCN,MAAjC,KAA4C;AACnE,MAAIA,MAAM,CAACC,IAAP,KAAgB,kBAApB,EACE,OAAO,EAAE,GAAGK,SAAL;AAAgB,OAAGN,MAAM,CAACE;AAA1B,GAAP;AACF,SAAOI,SAAP;AACD,CAJD;;AAMA,MAAMC,WAAW,GAAG,CAACC,IAAI,GAAG,CAAR,EAAWR,MAAX,KAAsB;AACxC,MAAIA,MAAM,CAACC,IAAP,KAAgB,aAApB,EAAmC,OAAOD,MAAM,CAACE,OAAd;AACnC,SAAOM,IAAP;AACD,CAHD;;AAKA,MAAMC,eAAe,GAAG,CAACC,QAAQ,GAAG,IAAZ,EAAkBV,MAAlB,KAA6B;AACnD,MAAIA,MAAM,CAACC,IAAP,KAAgB,cAApB,EAAoC,OAAOD,MAAM,CAACE,OAAd;AACpC,SAAOQ,QAAP;AACD,CAHD;;AAKA,MAAMC,gBAAgB,GAAG,CAACC,IAAI,GAAG,KAAR,EAAeZ,MAAf,KAA0B;AACjD,MAAIA,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAqC,OAAOD,MAAM,CAACE,OAAd;AACrC,SAAOU,IAAP;AACD,CAHD;;AAKA,MAAMC,cAAc,GAAG,CAACC,OAAO,GAAG,CAAX,EAAcd,MAAd,KAAyB;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,aAAL;AACE,aAAOD,MAAM,CAACE,OAAd;;AACF;AACE,aAAOY,OAAP;AAJJ;AAMD,CAPD;;AASA,MAAMC,eAAe,GAAG,CAACC,QAAQ,GAAG,CAAZ,EAAehB,MAAf,KAA0B;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,cAAL;AACE,aAAOD,MAAM,CAACE,OAAd;;AACF;AACE,aAAOc,QAAP;AAJJ;AAMD,CAPD;;AASA,eAAenB,eAAe,CAAC;AAC7BE,EAAAA,IAAI,EAAED,WADuB;AAE7BmB,EAAAA,IAAI,EAAEd,WAFuB;AAG7BG,EAAAA,SAAS,EAAED,gBAHkB;AAI7BG,EAAAA,IAAI,EAAED,WAJuB;AAK7BG,EAAAA,QAAQ,EAAED,eALmB;AAM7BG,EAAAA,IAAI,EAAED,gBANuB;AAO7BG,EAAAA,OAAO,EAAED,cAPoB;AAQ7BG,EAAAA,QAAQ,EAAED;AARmB,CAAD,CAA9B","sourcesContent":["import { combineReducers } from \"redux\";\n\nconst algoReducer = (algo = 1, action) => {\n  if (action.type === \"SELECT_ALGO\") return action.payload;\n  return algo;\n};\n\nconst diagReducer = (allowDiag = false, action) => {\n  if (action.type === \"ALLOW_DIAG\") return action.payload;\n  return allowDiag;\n};\n\nconst heuristicReducer = (heuristic = { 1: \"manhatten\" }, action) => {\n  if (action.type === \"CHANGE_HEURISTIC\")\n    return { ...heuristic, ...action.payload };\n  return heuristic;\n};\n\nconst mazeReducer = (maze = 0, action) => {\n  if (action.type === \"SELECT_MAZE\") return action.payload;\n  return maze;\n};\n\nconst animMazeReducer = (animMaze = true, action) => {\n  if (action.type === \"ANIMATE_MAZE\") return action.payload;\n  return animMaze;\n};\n\nconst animatingReducer = (anim = false, action) => {\n  if (action.type === \"SET_ANIMATING\") return action.payload;\n  return anim;\n};\n\nconst visitedReducer = (visited = 0, action) => {\n  switch (action.type) {\n    case \"SET_VISITED\":\n      return action.payload;\n    default:\n      return visited;\n  }\n};\n\nconst shortestReducer = (shortest = 0, action) => {\n  switch (action.type) {\n    case \"SET_SHORTEST\":\n      return action.payload;\n    default:\n      return shortest;\n  }\n};\n\nexport default combineReducers({\n  algo: algoReducer,\n  diag: diagReducer,\n  heuristic: heuristicReducer,\n  maze: mazeReducer,\n  animMaze: animMazeReducer,\n  anim: animatingReducer,\n  visited: visitedReducer,\n  shortest: shortestReducer\n});\n"]},"metadata":{},"sourceType":"module"}